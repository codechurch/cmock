#+TITLE: CMOCK
#+AUTHOR: ZX.Wang
#+EMAIL: codechurch@hotmail.com
#+OPTIONS: num:t /:nil \n:t 
#+LANGUAGE: zh

* Overview
  - Other languages: [[README.zh.org][中文]]
  - The cmock is a MOCK tool, which is just for C language.
  - The cmock can call/mock any glocal function (including static functions).
  - Now, cmock is just working on GNU/Linux of arch AMD64.
  - It needs objdump installed which is provided in binutils of Debian's packages.

* License
  GPLv3

* Installation
  The cmock is perl5 prog.
  To copy cmock to /usr/bin and change mode。
#+begin_src sh :export code
  sudo cp cmock /usr/bin && sudo chmod +x /usr/bin/cmock
#+end_src

* Usage
#+begin_src dummy
  cmock <Object File>
#+end_src
  The cmock analysises <base>.o and makes out <base>_cmock.h, <base>_cmock.c and <base>_cmock.lds . 
  The file <base>_cmock.h supports CMOCK macros. The file <base>_cmock.c supports cmock functions body. The file <base>_cmock.lds supports ld-script for linker.

* Example
  In the example, some.c is the subject file and test.c is unit testing code.
  in test.c, you should: 
#+begin_src dummy
  #include "some_cmock.h"
#+end_src

  - Phase 1, to compile some.c:
#+begin_src sh :export code
  gcc -c -g -Wall -fPIC -o some.o some.c
#+end_src
  
  - Phase 2, using cmock to generate some_cmock.h, some_cmock.c and some_cmock.lds .
#+begin_src sh :export code
  cmock some.o
#+end_src

  - Phase 3, to compile test.c and some_cmock.c
#+begin_src sh :export code
  gcc -c -g -Wall -fPIC -o test.o test.c 
  gcc -c -g -Wall -fPIC -o some_cmock.o some_cmock.c
#+end_src

  - Phase 4, to link all and make out program 
#+begin_src sh :export code
  gcc -g -Wall -o test_some.out some.o some_cmock.o test.o \
      -ldl -lm              \
      -Wl,-T,some_cmock.lds \
      -Wl,--unresolved-symbols=ignore-all 
#+end_src
  (--unresolved-symbols is optional)

* Programming Interface
  - function void cmock_restore()
	To restore relocation to real functions. 

  - macro CMOCK_CALL(rt, func, args)
	To call the real func, return type is rt, argments is args.
	Example:
#+begin_src C :export code
  int v = CMOCK_CALL(int, foobar, (3));
#+end_src

  - macro CMOCK_FUNC_VAL(func, val)
    To mock func, set return value is val.
#+begin_src C :export code
  CMOCK_FUNC_VAL(foobar, 10);
#+end_src

  - macro CMOCK_FUNC(rt, func)
	To mock func, return type is rt, set args and body.
#+begin_src C :export code
  CMOCK_FUNC(int, foobar) (int a)
    {
      return a * 2;
    }
#+end_src

* Simple Unit Test Interface
  - Environment Variable V
    To set verbose output
#+begin_src sh :export code
  V=1 ./test_some.out
#+end_src

  - function int cmock_result()
    To get the result of whole testing.

  - macro CMOCK_RESULT(expr)
    To set the result of this case. 
    
  - macro CMOCK_INFO(fmt, ...) and CMOCK_ERROR(fmt, ...)
    To print text.
    The CMOCK_ERROR also sets error result.

  - macro CMOCK_ASSERT(expr)
	To assert by expr.

  - macro CMOCK_CASE(name)
	To provide a head of test-case function.

  - macro CMOCK_RUN_CASE(name)
    To run a test case. You should run test cases in main.
	Example:
#+begin_src C :export code
CMOCK_CASE(some)
{
  ...
  CMOCK_RESULT(1);
}

CMOCK_CASE(other)
{
  if (foobar() == 0)
    CMOCK_INFO("foobar return OK");
  else               
    CMOCK_ERROR("foobar return error");
}

int main()
{
  CMOCK_RUN_CASE(some);
  CMOCK_RUN_CASE(other);
  return cmock_result();
}
#+end_src
